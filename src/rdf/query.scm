(define-module rdf.query
  (use srfi-1)
  (use srfi-13)
  (use rdf.store)
  (export rdf-query)
  )

(select-module rdf.query)

(define (variable? x)
  (and (symbol? x)
       (string-prefix? "?" (symbol->string x))))

(define (variable-get env var)
  (hash-table-get env var #f))

(define (variable-put! env var val)
  (hash-table-put! env var val))

(define (make-rdf-query-proc env)
  (case-lambda (() env)
               ((var) (hash-table-get env var))
               ((var pred) (pred (hash-table-get env var)))))

(define (rdf-query store querys)
  (let loop ((querys querys)
             (env (make-hash-table)))
    (if (null? querys)
        (make-rdf-query-proc env)
        (let1 query (car querys)
          (receive (sub pre obj) (apply rdf-env-query store env query)
            (dolist (var (list sub pre obj))
              (and var (variable-put! env (car var) (cdr var))))
            (loop (cdr querys) env))))))

(define (rdf-env-query store env sub pre obj)
  (let loop ((triples (triple-filter
                       (apply rdf-triple-match store
                              (map (lambda (q)
                                     (if (or (variable? q) (procedure? q)) #f q))
                                   (list sub pre obj)))
                       env sub pre obj))
             (sub-result (and (variable? sub) '()))
             (pre-result (and (variable? pre) '()))
             (obj-result (and (variable? obj) '())))
    (if (null? triples)
        (values (and sub-result (cons sub sub-result))
                (and pre-result (cons pre pre-result))
                (and obj-result (cons obj obj-result)))
        (with-rdf-triple (car triples)
           (lambda (sub pre obj)
             (loop (cdr triples)
                   (and sub-result (cons sub sub-result))
                   (and pre-result (cons pre pre-result))
                   (and obj-result (cons obj obj-result))))))))

(define (triple-filter triples env subp prep objp)
  (let ((sub-vals (variable-get env subp))
        (pre-vals (variable-get env prep))
        (obj-vals (variable-get env objp)))
    (filter (lambda (triple)
              (with-rdf-triple triple
                 (lambda (sub pre obj)
                   (and (if (procedure? subp)
                            (subp sub)
                            (or (not sub-vals)
                                (memq sub sub-vals)))
                        (if (procedure? prep)
                            (prep pre)
                            (or (not pre-vals)
                                (memq pre pre-vals)))
                        (if (procedure? objp)
                            (objp obj)
                            (or (not obj-vals)
                                (member obj obj-vals)))))))
            triples)))

(provide "rdf/query")
